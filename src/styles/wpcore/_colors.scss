@use 'tokens';
@use 'utilities/mixins';

$lightColors: (
  bright-green: tokens.$c-limeGreen-300,
  light-green: tokens.$c-limeGreen-400,
  med-green: tokens.$c-limeGreen-500,
  lime-green: tokens.$c-limeGreen-600,
  bright-teal: tokens.$c-teal-300,
  teal: tokens.$c-teal-500,
  bright-lavender: tokens.$c-lavender-500,
  gold: tokens.$c-yellow-500,
  bright-orange: tokens.$c-orange-500,
  sand: tokens.$c-gray-300,
  off-white: tokens.$c-gray-200,
  light-gray: tokens.$c-gray-400,
  neutral-gray: tokens.$c-gray-500,
  white: tokens.$c-white
);

$darkColors: (
  dark-green: tokens.$c-darkGreen-700,
  deep-green: tokens.$c-darkGreen-800,
  dark-teal: tokens.$c-teal-800,
  dark-purple: tokens.$c-lavender-800,
  dark-gray: tokens.$c-gray-600,
  black: tokens.$c-gray-800
);

//! ===========================================

@mixin colorLoop($colorMap, $colorContrast) {
  @each $name, $theColor in $colorMap {
    // Convert $name to a string with "" + $name to prevent issues with color keywords
    $safeName: '' + $name;

    .#{$safeName} {
      color: $theColor;
    }

    div.#{$safeName},
    section.#{$safeName} {
      background-color: $theColor;
      color: $colorContrast;
      margin-bottom: clamp(2rem, 4vw, 4rem);
      padding-block: clamp(2rem, 4vw, 4rem);
      @include mixins.extendedBackground('after', $theColor);

      & > [class*='_column'] {
        position: relative;
        z-index: tokens.$layer-2;

        &::after {
          display: none;
        }
      }

      & > p,
      ul,
      h2,
      h3,
      h4,
      h5,
      h6 {
        position: relative;
        z-index: tokens.$layer-2;
      }
    }

    div.#{$safeName}[class*='_column'] {
      &::after {
        display: none;
      }
    }
  }
}

@include colorLoop($lightColors, tokens.$c-gray-800);
@include colorLoop($darkColors, tokens.$c-white);

//! ===========================================
//! Has background $color and Has text $color
//! ===========================================
@mixin hasColorLoop($colorMap, $classPrefix) {
  @each $name, $theColor in $colorMap {
    // Convert $name to a string with "" + $name to prevent issues with color keywords
    $safeName: '' + $name;

    .has-text-color.has-#{$safeName}-color {
      color: $theColor;

      h2,
      h3,
      h4,
      h5,
      h6,
      span {
        color: $theColor;
      }
    }

    .has-background.has-#{$safeName}-background-color {
      background-color: $theColor;
    }

    .section.has-#{$safeName}-background-color {
      background-color: $theColor;
      margin-bottom: clamp(2rem, 4vw, 4rem);
      @include mixins.extendedBackground('after', $theColor);
      padding-block: clamp(2rem, 4vw, 4rem);
      position: relative;

      & > .content-container {
        position: relative;
        z-index: tokens.$layer-10;
      }
    }
  }
}

@include hasColorLoop($lightColors, 'light');
@include hasColorLoop($darkColors, 'dark');

// !=======================================

.has-background.has-transparent-background-color {
  background-color: transparent;
}
