diff --git a/node_modules/@faustwp/core/dist/cjs/config/index.js b/node_modules/@faustwp/core/dist/cjs/config/index.js
index faf99e0..d0966ae 100644
--- a/node_modules/@faustwp/core/dist/cjs/config/index.js
+++ b/node_modules/@faustwp/core/dist/cjs/config/index.js
@@ -1,58 +1,70 @@
-"use strict";
-var __importDefault = (this && this.__importDefault) || function (mod) {
-    return (mod && mod.__esModule) ? mod : { "default": mod };
-};
-Object.defineProperty(exports, "__esModule", { value: true });
-exports.getConfig = exports.normalizeConfig = exports.setConfig = void 0;
-const defaults_js_1 = __importDefault(require("lodash/defaults.js"));
-const extend_js_1 = __importDefault(require("lodash/extend.js"));
-const isString_js_1 = __importDefault(require("lodash/isString.js"));
-const once_js_1 = __importDefault(require("lodash/once.js"));
-const index_js_1 = require("../wpHooks/index.js");
-const log_js_1 = require("../utils/log.js");
-let config;
+'use strict'
+var __importDefault =
+  (this && this.__importDefault) ||
+  function (mod) {
+    return mod && mod.__esModule ? mod : { default: mod }
+  }
+Object.defineProperty(exports, '__esModule', { value: true })
+exports.getConfig = exports.normalizeConfig = exports.setConfig = void 0
+const defaults_js_1 = __importDefault(require('lodash/defaults.js'))
+const extend_js_1 = __importDefault(require('lodash/extend.js'))
+const isString_js_1 = __importDefault(require('lodash/isString.js'))
+const once_js_1 = __importDefault(require('lodash/once.js'))
+const index_js_1 = require('../wpHooks/index.js')
+const log_js_1 = require('../utils/log.js')
+let config
 function setConfig(_config) {
-    return (0, once_js_1.default)(() => {
-        config = _config;
-        const { experimentalPlugins, plugins } = _config;
-        // combine both sets of plugins until experimentalPlugins is fully deprecated
-        const allSupportedPlugins = [
-            ...(experimentalPlugins || []),
-            ...(plugins || []),
-        ];
-        allSupportedPlugins === null || allSupportedPlugins === void 0 ? void 0 : allSupportedPlugins.forEach((plugin) => {
-            var _a;
-            (_a = plugin === null || plugin === void 0 ? void 0 : plugin.apply) === null || _a === void 0 ? void 0 : _a.call(plugin, index_js_1.hooks);
-        });
-        if (experimentalPlugins === null || experimentalPlugins === void 0 ? void 0 : experimentalPlugins.length) {
-            // log to cli if experimentalPlugins is used since it's being deprecated
-            (0, log_js_1.warnLog)('Plugin System: The "experimentalPlugins" configuration option will be deprecated in the near future. Please use "plugins" instead in the faust.config.js.');
-        }
-    })();
+  return (0, once_js_1.default)(() => {
+    config = _config
+    const { experimentalPlugins, plugins } = _config
+    // combine both sets of plugins until experimentalPlugins is fully deprecated
+    const allSupportedPlugins = [
+      ...(experimentalPlugins || []),
+      ...(plugins || [])
+    ]
+    allSupportedPlugins === null || allSupportedPlugins === void 0
+      ? void 0
+      : allSupportedPlugins.forEach((plugin) => {
+          var _a
+          ;(_a =
+            plugin === null || plugin === void 0 ? void 0 : plugin.apply) ===
+            null || _a === void 0
+            ? void 0
+            : _a.call(plugin, index_js_1.hooks)
+        })
+    if (
+      experimentalPlugins === null || experimentalPlugins === void 0
+        ? void 0
+        : experimentalPlugins.length
+    ) {
+      // log to cli if experimentalPlugins is used since it's being deprecated
+      ;(0, log_js_1.warnLog)(
+        'Plugin System: The "experimentalPlugins" configuration option will be deprecated in the near future. Please use "plugins" instead in the faust.config.js.'
+      )
+    }
+  })()
 }
-exports.setConfig = setConfig;
+exports.setConfig = setConfig
 function normalizeConfig(_config) {
-    const cfg = (0, defaults_js_1.default)({}, _config, {
-        loginPagePath: '/login',
-        experimentalToolbar: false,
-        usePersistedQueries: false,
-        useGETForQueries: true,
-        basePath: '',
-    });
-    Object.keys(cfg).forEach((key) => {
-        const keyValue = key;
-        const value = cfg[keyValue];
-        if ((0, isString_js_1.default)(value)) {
-            cfg[keyValue] = value.trim();
-        }
-    });
-    if (cfg.experimentalToolbar) {
-        console.warn(`[Faust.js] As the team shifts focus to new work on [Headless WordPress](https://github.com/wpengine/hwptoolkit), the Admin Toolbar, which was ~~experimental~~, will no longer be actively maintained. No further updates will be made.`);
+  const cfg = (0, defaults_js_1.default)({}, _config, {
+    loginPagePath: '/login',
+    experimentalToolbar: false,
+    usePersistedQueries: false,
+    useGETForQueries: true,
+    basePath: ''
+  })
+  Object.keys(cfg).forEach((key) => {
+    const keyValue = key
+    const value = cfg[keyValue]
+    if ((0, isString_js_1.default)(value)) {
+      cfg[keyValue] = value.trim()
     }
-    return (0, extend_js_1.default)(cfg, {});
+  })
+
+  return (0, extend_js_1.default)(cfg, {})
 }
-exports.normalizeConfig = normalizeConfig;
+exports.normalizeConfig = normalizeConfig
 function getConfig() {
-    return normalizeConfig(config);
+  return normalizeConfig(config)
 }
-exports.getConfig = getConfig;
+exports.getConfig = getConfig
diff --git a/node_modules/@faustwp/core/dist/mjs/components/Toolbar/Toolbar.js b/node_modules/@faustwp/core/dist/mjs/components/Toolbar/Toolbar.js
index b80d9e1..2dc8c78 100644
--- a/node_modules/@faustwp/core/dist/mjs/components/Toolbar/Toolbar.js
+++ b/node_modules/@faustwp/core/dist/mjs/components/Toolbar/Toolbar.js
@@ -1,140 +1,195 @@
-var __rest = (this && this.__rest) || function (s, e) {
-    var t = {};
-    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
-        t[p] = s[p];
-    if (s != null && typeof Object.getOwnPropertySymbols === "function")
-        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
-            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
-                t[p[i]] = s[p[i]];
-        }
-    return t;
-};
-import { gql, useQuery } from '@apollo/client';
-import React, { useEffect, useMemo, useState } from 'react';
-import { getApolloAuthClient } from '../../client.js';
-import { useAuth } from '../../hooks/useAuth.js';
-import { hooks } from '../../wpHooks/index.js';
-import { Edit } from './nodes/Edit.js';
-import { GraphiQL } from './nodes/GraphiQL.js';
-import { MyAccount } from './nodes/MyAccount.js';
-import { SiteName } from './nodes/SiteName.js';
-import { ToolbarNode } from './ToolbarNode.js';
+var __rest =
+  (this && this.__rest) ||
+  function (s, e) {
+    var t = {}
+    for (var p in s)
+      if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
+        t[p] = s[p]
+    if (s != null && typeof Object.getOwnPropertySymbols === 'function')
+      for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
+        if (
+          e.indexOf(p[i]) < 0 &&
+          Object.prototype.propertyIsEnumerable.call(s, p[i])
+        )
+          t[p[i]] = s[p[i]]
+      }
+    return t
+  }
+import { gql, useQuery } from '@apollo/client'
+import React, { useEffect, useMemo, useState } from 'react'
+import { getApolloAuthClient } from '../../client.js'
+import { useAuth } from '../../hooks/useAuth.js'
+import { hooks } from '../../wpHooks/index.js'
+import { Edit } from './nodes/Edit.js'
+import { GraphiQL } from './nodes/GraphiQL.js'
+import { MyAccount } from './nodes/MyAccount.js'
+import { SiteName } from './nodes/SiteName.js'
+import { ToolbarNode } from './ToolbarNode.js'
 /**
  * The component to actually render the toolbar. At this point we can assume
  * there is a proper authenticated user.
  */
 export function AuthenticatedToolbar({ seedNode }) {
-    /**
-     * Define Toolbar Nodes that should be included by default.
-     */
-    const coreToolbarNodes = useMemo(() => {
-        return [
-            {
-                id: 'site-name',
-                location: 'primary',
-                component: React.createElement(SiteName, null),
-            },
-            {
-                id: 'edit',
-                location: 'primary',
-                component: React.createElement(Edit, { seedNode: seedNode }),
-            },
-            {
-                id: 'graphiql',
-                location: 'primary',
-                component: React.createElement(GraphiQL, null),
-            },
-            {
-                id: 'my-account',
-                location: 'secondary',
-                component: React.createElement(MyAccount, null),
-                additionalClassNames: 'with-avatar',
-            },
-        ];
-    }, [seedNode]);
-    const [toolbarNodes, setToolbarNodes] = useState(coreToolbarNodes);
-    /**
-     * Handle Toolbar nodes.
-     */
-    useEffect(() => {
-        const filteredNodes = hooks.applyFilters('toolbarNodes', coreToolbarNodes, {
-            seedNode,
-        });
-        const uniqueIds = new Set(filteredNodes.map((nodes) => nodes.id));
-        if (uniqueIds.size < filteredNodes.length) {
-            throw new Error('Toolbar Nodes must have unique keys.');
-        }
-        setToolbarNodes(filteredNodes);
-    }, [coreToolbarNodes, seedNode]);
-    /**
-     * Handle adding `admin-bar` body class on render.
-     *
-     * This could eventually be handled with a Faust bodyClass hook
-     * @link https://developer.wordpress.org/reference/hooks/body_class/
-     */
-    useEffect(() => {
-        document === null || document === void 0 ? void 0 : document.body.classList.add('admin-bar');
-        // Cleanup body class when this component unmounts.
-        // eslint-disable-next-line consistent-return
-        return () => {
-            document === null || document === void 0 ? void 0 : document.body.classList.remove('admin-bar');
-        };
-    }, []);
-    const primaryNodes = toolbarNodes.filter(({ location }) => location === 'primary');
-    const secondaryNodes = toolbarNodes.filter(({ location }) => location === 'secondary');
-    return (React.createElement("div", { id: "wpadminbar", className: "nojq" },
-        React.createElement("div", { id: "wp-toolbar", className: "quicklinks", role: "navigation", "aria-label": "Toolbar" },
-            React.createElement("ul", { id: "wp-admin-bar-root-default", className: "ab-top-menu", "aria-label": "primary toolbar menu items" }, primaryNodes.map((_a) => {
-                var { component, id } = _a, props = __rest(_a, ["component", "id"]);
-                return (
-                // eslint-disable-next-line react/jsx-props-no-spreading
-                React.createElement(ToolbarNode, Object.assign({ key: id, id: id }, props), component));
-            })),
-            React.createElement("ul", { id: "wp-admin-bar-top-secondary", className: "ab-top-secondary ab-top-menu", "aria-label": "secondary toolbar menu items" }, secondaryNodes.map((_a) => {
-                var { component, id } = _a, props = __rest(_a, ["component", "id"]);
-                return (
-                // eslint-disable-next-line react/jsx-props-no-spreading
-                React.createElement(ToolbarNode, Object.assign({ key: id, id: id }, props), component));
-            })))));
+  /**
+   * Define Toolbar Nodes that should be included by default.
+   */
+  const coreToolbarNodes = useMemo(() => {
+    return [
+      {
+        id: 'site-name',
+        location: 'primary',
+        component: React.createElement(SiteName, null)
+      },
+      {
+        id: 'edit',
+        location: 'primary',
+        component: React.createElement(Edit, { seedNode: seedNode })
+      },
+      {
+        id: 'graphiql',
+        location: 'primary',
+        component: React.createElement(GraphiQL, null)
+      },
+      {
+        id: 'my-account',
+        location: 'secondary',
+        component: React.createElement(MyAccount, null),
+        additionalClassNames: 'with-avatar'
+      }
+    ]
+  }, [seedNode])
+  const [toolbarNodes, setToolbarNodes] = useState(coreToolbarNodes)
+  /**
+   * Handle Toolbar nodes.
+   */
+  useEffect(() => {
+    const filteredNodes = hooks.applyFilters('toolbarNodes', coreToolbarNodes, {
+      seedNode
+    })
+    const uniqueIds = new Set(filteredNodes.map((nodes) => nodes.id))
+    if (uniqueIds.size < filteredNodes.length) {
+      throw new Error('Toolbar Nodes must have unique keys.')
+    }
+    setToolbarNodes(filteredNodes)
+  }, [coreToolbarNodes, seedNode])
+  /**
+   * Handle adding `admin-bar` body class on render.
+   *
+   * This could eventually be handled with a Faust bodyClass hook
+   * @link https://developer.wordpress.org/reference/hooks/body_class/
+   */
+  useEffect(() => {
+    document === null || document === void 0
+      ? void 0
+      : document.body.classList.add('admin-bar')
+    // Cleanup body class when this component unmounts.
+    // eslint-disable-next-line consistent-return
+    return () => {
+      document === null || document === void 0
+        ? void 0
+        : document.body.classList.remove('admin-bar')
+    }
+  }, [])
+  const primaryNodes = toolbarNodes.filter(
+    ({ location }) => location === 'primary'
+  )
+  const secondaryNodes = toolbarNodes.filter(
+    ({ location }) => location === 'secondary'
+  )
+  return React.createElement(
+    'div',
+    { id: 'wpadminbar', className: 'nojq' },
+    React.createElement(
+      'div',
+      {
+        id: 'wp-toolbar',
+        className: 'quicklinks',
+        role: 'navigation',
+        'aria-label': 'Toolbar'
+      },
+      React.createElement(
+        'ul',
+        {
+          id: 'wp-admin-bar-root-default',
+          className: 'ab-top-menu',
+          'aria-label': 'primary toolbar menu items'
+        },
+        primaryNodes.map((_a) => {
+          var { component, id } = _a,
+            props = __rest(_a, ['component', 'id'])
+          return (
+            // eslint-disable-next-line react/jsx-props-no-spreading
+            React.createElement(
+              ToolbarNode,
+              Object.assign({ key: id, id: id }, props),
+              component
+            )
+          )
+        })
+      ),
+      React.createElement(
+        'ul',
+        {
+          id: 'wp-admin-bar-top-secondary',
+          className: 'ab-top-secondary ab-top-menu',
+          'aria-label': 'secondary toolbar menu items'
+        },
+        secondaryNodes.map((_a) => {
+          var { component, id } = _a,
+            props = __rest(_a, ['component', 'id'])
+          return (
+            // eslint-disable-next-line react/jsx-props-no-spreading
+            React.createElement(
+              ToolbarNode,
+              Object.assign({ key: id, id: id }, props),
+              component
+            )
+          )
+        })
+      )
+    )
+  )
 }
 /**
  * With an authenticated user, make a request for the viewer in WPGraphQL and
  * get the user' preference whether to display the toolbar.
  */
 export function ToolbarAwaitUser({ seedNode }) {
-    const client = getApolloAuthClient();
-    const { data, error } = useQuery(gql `
-			{
-				viewer {
-					shouldShowFaustToolbar
-				}
-			}
-		`, { client });
-    /**
-     * If the above query for "shouldShowFaustToolbar" fails, it likely means
-     * that the user doesn't have a version of the FaustWP plugin installed where
-     * this field was made available. In that case, don't throw an error, and
-     * just continue with showing the toolbar.
-     */
-    if (error) {
-        return React.createElement(AuthenticatedToolbar, { seedNode: seedNode });
-    }
-    if (!data) {
-        return null;
-    }
-    if (data.viewer.shouldShowFaustToolbar === false) {
-        return null;
-    }
-    return React.createElement(AuthenticatedToolbar, { seedNode: seedNode });
+  const client = getApolloAuthClient()
+  const { data, error } = useQuery(
+    gql`
+      {
+        viewer {
+          shouldShowFaustToolbar
+        }
+      }
+    `,
+    { client }
+  )
+  /**
+   * If the above query for "shouldShowFaustToolbar" fails, it likely means
+   * that the user doesn't have a version of the FaustWP plugin installed where
+   * this field was made available. In that case, don't throw an error, and
+   * just continue with showing the toolbar.
+   */
+  if (error) {
+    return React.createElement(AuthenticatedToolbar, { seedNode: seedNode })
+  }
+  if (!data) {
+    return null
+  }
+  if (data.viewer.shouldShowFaustToolbar === false) {
+    return null
+  }
+  return React.createElement(AuthenticatedToolbar, { seedNode: seedNode })
 }
 /**
  * Renders a Toolbar that is based on WordPress' own toolbar.
  */
 export function Toolbar({ seedNode }) {
-    const { isAuthenticated } = useAuth();
-    console.warn(`[Faust.js] As the team shifts focus to new work on [Headless WordPress](https://github.com/wpengine/hwptoolkit), the Admin Toolbar, which was ~~experimental~~, will no longer be actively maintained. No further updates will be made.`);
-    if (isAuthenticated !== true) {
-        return null;
-    }
-    return React.createElement(ToolbarAwaitUser, { seedNode: seedNode });
+  const { isAuthenticated } = useAuth()
+  if (isAuthenticated !== true) {
+    return null
+  }
+  return React.createElement(ToolbarAwaitUser, { seedNode: seedNode })
 }
diff --git a/node_modules/@faustwp/core/dist/mjs/config/index.js b/node_modules/@faustwp/core/dist/mjs/config/index.js
index 3e19999..d82110e 100644
--- a/node_modules/@faustwp/core/dist/mjs/config/index.js
+++ b/node_modules/@faustwp/core/dist/mjs/config/index.js
@@ -1,49 +1,59 @@
-import defaults from 'lodash/defaults.js';
-import extend from 'lodash/extend.js';
-import isString from 'lodash/isString.js';
-import once from 'lodash/once.js';
-import { hooks } from '../wpHooks/index.js';
-import { warnLog } from '../utils/log.js';
-let config;
+import defaults from 'lodash/defaults.js'
+import extend from 'lodash/extend.js'
+import isString from 'lodash/isString.js'
+import once from 'lodash/once.js'
+import { hooks } from '../wpHooks/index.js'
+import { warnLog } from '../utils/log.js'
+let config
 export function setConfig(_config) {
-    return once(() => {
-        config = _config;
-        const { experimentalPlugins, plugins } = _config;
-        // combine both sets of plugins until experimentalPlugins is fully deprecated
-        const allSupportedPlugins = [
-            ...(experimentalPlugins || []),
-            ...(plugins || []),
-        ];
-        allSupportedPlugins === null || allSupportedPlugins === void 0 ? void 0 : allSupportedPlugins.forEach((plugin) => {
-            var _a;
-            (_a = plugin === null || plugin === void 0 ? void 0 : plugin.apply) === null || _a === void 0 ? void 0 : _a.call(plugin, hooks);
-        });
-        if (experimentalPlugins === null || experimentalPlugins === void 0 ? void 0 : experimentalPlugins.length) {
-            // log to cli if experimentalPlugins is used since it's being deprecated
-            warnLog('Plugin System: The "experimentalPlugins" configuration option will be deprecated in the near future. Please use "plugins" instead in the faust.config.js.');
-        }
-    })();
+  return once(() => {
+    config = _config
+    const { experimentalPlugins, plugins } = _config
+    // combine both sets of plugins until experimentalPlugins is fully deprecated
+    const allSupportedPlugins = [
+      ...(experimentalPlugins || []),
+      ...(plugins || [])
+    ]
+    allSupportedPlugins === null || allSupportedPlugins === void 0
+      ? void 0
+      : allSupportedPlugins.forEach((plugin) => {
+          var _a
+          ;(_a =
+            plugin === null || plugin === void 0 ? void 0 : plugin.apply) ===
+            null || _a === void 0
+            ? void 0
+            : _a.call(plugin, hooks)
+        })
+    if (
+      experimentalPlugins === null || experimentalPlugins === void 0
+        ? void 0
+        : experimentalPlugins.length
+    ) {
+      // log to cli if experimentalPlugins is used since it's being deprecated
+      warnLog(
+        'Plugin System: The "experimentalPlugins" configuration option will be deprecated in the near future. Please use "plugins" instead in the faust.config.js.'
+      )
+    }
+  })()
 }
 export function normalizeConfig(_config) {
-    const cfg = defaults({}, _config, {
-        loginPagePath: '/login',
-        experimentalToolbar: false,
-        usePersistedQueries: false,
-        useGETForQueries: true,
-        basePath: '',
-    });
-    Object.keys(cfg).forEach((key) => {
-        const keyValue = key;
-        const value = cfg[keyValue];
-        if (isString(value)) {
-            cfg[keyValue] = value.trim();
-        }
-    });
-    if (cfg.experimentalToolbar) {
-        console.warn(`[Faust.js] As the team shifts focus to new work on [Headless WordPress](https://github.com/wpengine/hwptoolkit), the Admin Toolbar, which was ~~experimental~~, will no longer be actively maintained. No further updates will be made.`);
+  const cfg = defaults({}, _config, {
+    loginPagePath: '/login',
+    experimentalToolbar: false,
+    usePersistedQueries: false,
+    useGETForQueries: true,
+    basePath: ''
+  })
+  Object.keys(cfg).forEach((key) => {
+    const keyValue = key
+    const value = cfg[keyValue]
+    if (isString(value)) {
+      cfg[keyValue] = value.trim()
     }
-    return extend(cfg, {});
+  })
+
+  return extend(cfg, {})
 }
 export function getConfig() {
-    return normalizeConfig(config);
+  return normalizeConfig(config)
 }
